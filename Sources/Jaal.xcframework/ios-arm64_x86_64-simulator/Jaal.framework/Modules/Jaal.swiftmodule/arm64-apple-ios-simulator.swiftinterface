// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Jaal
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import Jaal
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol TargetType {
  var baseURL: Foundation.URL { get }
  var path: Swift.String { get }
  var method: Jaal.HTTPMethod { get }
  var task: Jaal.HTTPTaskType { get }
  var headers: [Swift.String : Swift.String]? { get }
}
public protocol APIClient {
  associatedtype Target : Jaal.TargetType
  @available(iOS 13.0, macOS 10.15, *)
  func request<D, S>(target: Self.Target, urlSession: Foundation.URLSession, jsonDecoder: Foundation.JSONDecoder, scheduler: S, type: D.Type) -> Combine.AnyPublisher<D, Jaal.JaalError> where D : Swift.Decodable, S : Combine.Scheduler
}
public class JaalProvider<Target> : Jaal.APIClient where Target : Jaal.TargetType {
  public init()
  @available(iOS 13.0, macOS 10.15, *)
  public func request<D, S>(target: Target, urlSession: Foundation.URLSession = URLSession.shared, jsonDecoder: Foundation.JSONDecoder = .init(), scheduler: S, type: D.Type) -> Combine.AnyPublisher<D, Jaal.JaalError> where D : Swift.Decodable, S : Combine.Scheduler
  @objc deinit
}
extension Jaal.JaalProvider {
  public func constructRequest(with target: any Jaal.TargetType) -> Foundation.URLRequest
  public func prepareGetRequest(with target: any Jaal.TargetType) -> Foundation.URLRequest
  public func prepareGeneralRequest(with target: any Jaal.TargetType) -> Foundation.URLRequest
}
public enum JaalError : Swift.Error {
  case notConnectedToInternet(any Swift.Error)
  case invalidResponse(statusCode: Swift.Int)
  case invalidData(any Swift.Error)
  case invalidServerResponse
}
public enum HTTPTaskType {
  case requestPlain
  case requestData(data: Foundation.Data)
  case requestParameters(parameters: [Swift.String : Any])
  case requestWithEncodable(encodable: any Swift.Encodable, encoding: Foundation.JSONEncoder = JSONEncoder())
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Jaal.HTTPMethod : Swift.Equatable {}
extension Jaal.HTTPMethod : Swift.Hashable {}
extension Jaal.HTTPMethod : Swift.RawRepresentable {}
